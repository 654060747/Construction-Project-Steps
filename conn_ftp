from ftplib import FTP
import os.path

#设置FTP连接信息
address= '127.0.0.1'
port= 22
#FTP用户名
user_name= 'xxx'
#FTP密码
password= 'xxxxx'

#本地要上传的文件名
local_file_name="local/test.xlsx"
#FTP中要下载的文件名
remote_file_name="/xx/xx/xx/"

# #将文件上传到FTP
# def upload_file(local_file_name):
#     try:
#         ftp = FTP()
#         ftp.connect(address,port)
#         ftp.login(user_name,password)
#         #文件上传到FTP服务器的路径（前提是路径要存在，否则会报错）
#         remote_path="/"#如：将本地文件上传到FTP根目录
#         ftp.cwd(remote_path)#切换到此路径
#         file=open(local_file_name,'rb')
#         #如果参数 pasv 为真，打开被动模式传输 (PASV MODE) ，否则，如果参数 pasv 为假则关闭被动传输模式。
#         ftp.set_pasv(0)    
#         ftp.storbinary('STOR %s' % os.path.basename(local_file_name),file)    
#         file.close()    
#         ftp.close()
#         print("文件上传完成")
#     except Exception as e:
#         print("文件上传失败...")
#         print(str(e))

#upload_file(local_file_name)

#从FTP中下载文件到本地
def download_file(remote_file_name):
    try:
        #创建ftp对象实例 
        ftp = FTP()  
        # ftp.set_debuglevel(2)             #打开调试级别2，显示详细信息
        #连接接FTP
        ftp.connect(address, port)
        #通过账号和密码登录FTP服务器 
        ftp.login(user_name,password)
        print ftp.getwelcome()            #打印出欢迎信息
        #如果参数 pasv 为真，打开被动模式传输 (PASV MODE) ，否则，如果参数 pasv 为假则关闭被动传输模式。
        # ftp.set_pasv(0)
        # #设置FTP上文件下载到本地的位置
        # local_path="./ftp/"#如：将文件下载到当前程序所在目录中的ftp子目录中，也可以使用绝对路径
        # #为准备下载到本地的文件，创建文件对象（默认为远程下载的文件名，也可自定义）
        # local_file_name=local_path + os.path.basename(remote_file_name)
        # #以写模式在本地打开文件
        # file = open(local_file_name, 'wb')
        # #从FTP服务器下载文件到前一步创建的文件对象，其中写对象为file.write，1024是缓冲区大小  
        # ftp.retrbinary('RETR '+remote_file_name,file.write,1024)  
        #关闭下载到本地的文件  
        #提醒：虽然Python可以自动关闭文件，但实践证明，如果想下载完后立即读该文件，最好关闭后重新打开一次 
        file.close() 
        #关闭FTP客户端连接
        ftp.close()
        print("文件下载完成")
    except Exception as e:
        print("文件下载失败...")
        print(str(e))

download_file(remote_file_name)









# -*- coding:utf-8 -*-
import ftplib
import os
import socket
from ftplib import FTP

#设置FTP连接信息
host = '22222.22.22'
ftp_prot = 21
#FTP用户名
user = ''
#FTP密码
passwd = ''
# 服务器路径
remotepath = "/home/fjdal/"
filename = "test"
# 下载到本地路径
localpath = "./ftp/"
# 设置缓冲区大小
buffer_size = 1024

ftp_timeout = 30
# 创建目录
def checkFolder(folder):
	if not os.path.exists(folder):
		os.makedirs(folder)

# 写csv数据
def write_file(data):
	with open(new_csv, 'a+') as f:
		writer = f.write(data+'\n')
	pass


def ftpconnect(host, username, password):
	ftp = FTP() # 设置变量
	timeout = ftp_timeout
	port = ftp_prot
	ftp.connect(host, port, timeout) # 连接FTP服务器
	ftp.login(username,password) # 登录
	return ftp
# def downloadfile(ftp, remotepath, localpath):
# 	ftp.cwd(remotepath)
# 	list_file = ftp.nlst() # 获取目录下的文件,获得目录列表
# 	list_dir = ftp.dir() # 获取目录下的文件,获得目录列表
# 	print(list_file)
# 	print(list_dir)
# 	# for name in list:
	# 	print(name)
		# path = localpath + name # 定义文件保存路径
		# # f = open(path, 'wb') # 打开要保存文件
		# # filename = 'RETR ' + name # 保存FTP文件
		# # ftp.set_debuglevel(0)         #关闭调试
		# try:
		# 	with open(path, "wb") as f:
		# 		ftp.retrbinary('RETR {0}'.format(remotepath), f.write, buffer_size)
		# 		f.close()
		# except:
		# 	print('savefail\t%s' % remotepath)     

# # 下载文件
# def downloadfile(ftp, localfile, remotefile):
#     file_handler = open(localfile, 'wb')
#     print(file_handler)
#     ftp.retrbinary('RETR ' + remotefile, file_handler.write)
#     file_handler.close()
#     return True

# 下载目录(与ftp文件目录一致)
def downloaddir(ftp, remotepath, localpath):
	checkFolder(localpath)
	ftp.cwd(remotepath)
	RemoteNames = ftp.nlst()
	print("RemoteNames", RemoteNames)
	# for file in RemoteNames:
	#     local = os.path.join(localpath, file)
	#     print(ftp.nlst(file))
	#     if file.find(".") == -1:
	# 		checkFolder(local)
	#         downloaddir(ftp, local, file)
	#     else:
	#         downloadfile(ftp, local, file)
	# ftp.cwd("..")
	return

# 删除文件
def delftpfile(ftp,remotepath):
	ftp.cwd(remotepath)
	RemoteNames = ftp.nlst()
	for file in RemoteNames:
		ftp.delete(file)
		print("删除成功"+file)



def search_file(ftp, start_dir):
	ftp.cwd(start_dir)
	
	dir_res = []
	ftp.dir('.', dir_res.append)   #对当前目录进行dir()，将结果放入列表
	for i in dir_res:
		if i.startswith("d"):
			global sum1 
			sum1 += 1
			search_file(ftp.pwd()+"/"+i.split(" ")[-1])
			ftp.cwd('..')
		else:
			global sum2, value
			sum2 += 1
			val = i.split(" ")[-1]
			value += ftp.size(val)
			if ftp.pwd().endswith('/'):              
#                print ftp.pwd()+val+"     "+str(ftp.size(val))+" B"   #打印出每个文件路径和大小
				 pass
			else:             
#                print ftp.pwd()+"/"+val+"     "+str(ftp.size(val))+" B"
				 pass
		


def get_dirs(ftp, *args):
	cmd = 'LIST'
	func = None
	if args[-1:] and type(args[-1]) != type(''):
		args, func = args[:-1], args[-1]
	for arg in args:
		cmd = cmd + (' ' + arg)
	folders = []
	dict={}
	ftp.retrlines(cmd, folders.append)
	long=len(folders)
	while long>0:
		long=long-1
		dict[(folders[long])[62:]]=(folders[long])[:61]
	return dict

# 链接ftp
def connect_ftp():

	# ftp = FTP()
	# ftp.set_debuglevel(2)
	ftp = ftpconnect(host, user, passwd)
	# ftp.connect(host=host, port=port)
	# ftp.login(user=user, passwd=passwd)
	print("登录成功*******已经成功连接服务器FTP服务！！！")
	# print(ftp.welcome)
	print(ftp.pwd())
	print(ftp)
	# lst = ftp.getdirs()  # 返回目录下文件夹和文件列表
	# print(lst)
	# search_file(ftp, ftp.pwd())
	dir_res = get_dirs(ftp)
	# ftp.dir('.', dir_res.append)
	print(dir_res)

	# downloaddir(ftp,remotepath,localpath)
	# downloadfile(ftp,remotepath,localpath)
	

connect_ftp()






